{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","type","placeholder","autofocus","onChange","handleChange","App","e","setState","searchFild","target","value","state","fetch","then","response","json","users","this","filtered","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUACaA,EAAM,SAAAC,GAAK,OACpB,sBAAKC,UAAU,iBAAf,UACJ,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,yBAC/D,6BACKL,EAAMG,QAAQG,OAEnB,4BACKN,EAAMG,QAAQI,YCNVC,G,MAAW,SAACR,GAAD,OAEpB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KACb,SAAAP,GAAO,OACH,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNxBO,G,MAAU,SAAAX,GAAK,OACxB,uBAAOY,KAAK,SACZX,UAAU,SACVY,YAAeb,EAAMa,YACpBC,WAAS,EAAEC,SACRf,EAAMgB,iBCkCCC,E,kDAnCX,aAAe,IAAD,8BACV,gBAkBJD,aAAa,SAAAE,GAAC,OAAE,EAAKC,SAAS,CAACC,WAAWF,EAAEG,OAAOC,SAjB/C,EAAKC,MAAQ,CACTd,SAAU,GACVW,WAAW,IAJL,E,qDAOd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MACG,SAAAC,GAAQ,OAEJA,EAASC,UAGhBF,MACG,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAI/C,WAAU,IAAD,EACwBC,KAAKN,MAA3Bd,EADF,EACEA,SAAUW,EADZ,EACYA,WACXU,EAASrB,EAASsB,QACpB,SAAA5B,GAAO,OAAEA,EAAQG,KAAK0B,cAAcC,SAASb,EAAWY,kBAE5D,OACA,sBAAK/B,UAAY,MAAjB,UACI,mDACA,cAAC,EAAD,CAAWY,YAAY,kBAAmBG,aAAca,KAAKb,eAC7D,cAAC,EAAD,CAAUP,SAAUqB,W,GA9BdI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.942f9fda.chunk.js","sourcesContent":["import \"./card.styles.css\"\r\nexport const Card =props =>(\r\n    <div className=\"card-container\">\r\n<img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"image of the monster\" />\r\n    <h2>\r\n        {props.monster.name}\r\n    </h2>\r\n    <p>\r\n        {props.monster.email}\r\n    </p>\r\n    </div>\r\n)","import { Card } from \"../card/card.component\"\r\nimport \"./CardList.styles.css\"\r\nexport const CardList = (props)=>(\r\n    \r\n    <div className=\"card-list\">\r\n        {\r\n            props.monsters.map(\r\n              monster => (\r\n                  <Card key={monster.id} monster={monster}/>\r\n\r\n              )\r\n            )\r\n          }\r\n    </div>\r\n)","import \"./search-box.styles.css\"\r\n\r\nexport const SearchBox=props=>(\r\n    <input type=\"search\" \r\n    className=\"search\" \r\n    placeholder = {props.placeholder}\r\n     autofocus  onChange={\r\n        props.handleChange\r\n    }/>\r\n)","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchFild:\"\"\n        }\n    }\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(\n                response => // the thing that the fetch returns from the outside servers\n                (\n                    response.json()\n                )\n            )\n            .then(\n                users => this.setState({ monsters: users })\n            )\n    }\n    handleChange=e=>this.setState({searchFild:e.target.value})\n    render() {\n        const {monsters, searchFild}=this.state;\n        const filtered=monsters.filter(\n            monster=>monster.name.toLowerCase().includes(searchFild.toLowerCase())\n        )\n        return (\n        <div className = \"App\">\n            <h1>Monsters Rolodex </h1>\n            <SearchBox placeholder=\"Search monsters\"  handleChange={this.handleChange} />\n            <CardList monsters={filtered}/>\n        </div>\n        )\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}